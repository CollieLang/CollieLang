# SYNTAX TEST "source.collie"

// 这是一个单行注释
#^^ comment.line.double-slash.collie

/* 这是一个
   多行注释 */
#^^ comment.block.collie

// 变量声明测试
number a = 23;
#^^^^^^ storage.type.primitive.collie
#       ^ variable.other.collie
#         ^ keyword.operator.assignment.collie
#           ^^ constant.numeric.integer.collie

[number] b = [1, 2];
#^^^^^^^ storage.type.primitive.collie
#         ^ variable.other.collie
#             ^ constant.numeric.integer.collie
#                ^ constant.numeric.integer.collie

// 函数声明测试
number function() {
#^^^^^^ storage.type.primitive.collie
#       ^^^^^^^^ entity.name.function.collie
    return 42;
#   ^^^^^^ keyword.control.collie
#          ^^ constant.numeric.integer.collie
}

// 类声明测试
class MyClass {
#^^^^^ keyword.other.collie
#      ^^^^^^^ entity.name.type.class.collie
    public number value;
#   ^^^^^^ storage.modifier.collie
#          ^^^^^^ storage.type.primitive.collie
#                 ^^^^^ variable.other.collie

    public MyClass(number val) {
#   ^^^^^^ storage.modifier.collie
#          ^^^^^^^ entity.name.function.collie
#                  ^^^^^^ storage.type.primitive.collie
#                         ^^^ variable.parameter.collie
        this.value = val;
#       ^^^^ keyword.other.collie
    }
}

// 字符串测试
string str1 = "Hello World";
#^^^^^^ storage.type.primitive.collie
#       ^^^^ variable.other.collie
#              ^^^^^^^^^^^^ string.quoted.double.collie

string str2 = """
#^^^^^^ storage.type.primitive.collie
#       ^^^^ variable.other.collie
    Hello
    World
    """;
#   ^^^ string.quoted.triple.collie

string str3 = @"Hello {name}";
#^^^^^^ storage.type.primitive.collie
#       ^^^^ variable.other.collie
#             ^^^^^^^^^^^^^ string.interpolated.collie
#                    ^^^^ variable.interpolated.collie

// 数字类型测试
number n1 = 0xFF;
#^^^^^^ storage.type.primitive.collie
#          ^^^^ constant.numeric.hex.collie

number n2 = 0b1010;
#^^^^^^ storage.type.primitive.collie
#          ^^^^^^ constant.numeric.binary.collie

number n3 = 3.14;
#^^^^^^ storage.type.primitive.collie
#          ^^^^ constant.numeric.decimal.collie

// 布尔类型测试
bool flag = true;
#^^^ storage.type.primitive.collie
#          ^^^^ constant.language.collie

tribool state = unset;
#^^^^^^ storage.type.primitive.collie
#              ^^^^^ constant.language.collie

// 位类型测试
bit b = 1;
#^^ storage.type.primitive.collie
#      ^ constant.numeric.integer.collie

byte byteVal = 0xFF;
#^^^ storage.type.primitive.collie
#             ^^^^ constant.numeric.hex.collie

// 运算符测试
a += 1;
# ^^ keyword.operator.compound_assignment.collie
a -= 1;
# ^^ keyword.operator.compound_assignment.collie
a *= 1;
# ^^ keyword.operator.compound_assignment.collie
a /= 1;
# ^^ keyword.operator.compound_assignment.collie

a++;
# ^^ keyword.operator.arithmetic.collie
++a;
#^^ keyword.operator.arithmetic.collie
a--;
# ^^ keyword.operator.arithmetic.collie
--a;
#^^ keyword.operator.arithmetic.collie

a == b;
# ^^ keyword.operator.comparison.collie
a != b;
# ^^ keyword.operator.comparison.collie
a > b;
# ^ keyword.operator.comparison.collie
a < b;
# ^ keyword.operator.comparison.collie
a >= b;
# ^^ keyword.operator.comparison.collie
a <= b;
# ^^ keyword.operator.comparison.collie

// 逻辑运算符测试
!flag;
#^ keyword.operator.logical.collie
flag && true;
#    ^^ keyword.operator.logical.collie
flag || false;
#    ^^ keyword.operator.logical.collie

// 位运算符测试
a & b;
# ^ keyword.operator.bitwise.collie
a | b;
# ^ keyword.operator.bitwise.collie
a ^ b;
# ^ keyword.operator.bitwise.collie
~a;
#^ keyword.operator.bitwise.collie
a << 1;
# ^^ keyword.operator.bitwise.collie
a >> 1;
# ^^ keyword.operator.bitwise.collie

// 容器类型测试
list[number] numbers = [1, 2, 3];
#^^^ storage.type.collection.collie
#    ^^^^^^ storage.type.primitive.collie

set[string] strings = ["a", "b"];
#^^ storage.type.collection.collie
#   ^^^^^^ storage.type.primitive.collie

map[string: number] scores = {"John": 85};
#^^ storage.type.collection.collie
#   ^^^^^^ storage.type.primitive.collie
#           ^^^^^^ storage.type.primitive.collie

// 注解测试
@deprecated
#^^^^^^^^^ storage.type.annotation.collie
class OldClass {
}

@override
#^^^^^^^^ storage.type.annotation.collie
public void method() {
}